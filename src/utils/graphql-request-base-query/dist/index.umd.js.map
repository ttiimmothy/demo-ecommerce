{"version":3,"file":"index.umd.js","sources":["../src/index.ts"],"sourcesContent":["import { isPlainObject } from '@reduxjs/toolkit'\nimport type { BaseQueryFn } from '@reduxjs/toolkit/query'\nimport type { DocumentNode } from 'graphql'\nimport { GraphQLClient, ClientError, RequestOptions } from 'graphql-request'\nimport type {\n  ErrorResponse,\n  GraphqlRequestBaseQueryArgs,\n  PrepareHeaders,\n  RequestHeaders,\n} from './GraphqlBaseQueryTypes'\n\nexport const graphqlRequestBaseQuery = <E = ErrorResponse>(\n  options: GraphqlRequestBaseQueryArgs<E>\n): BaseQueryFn<\n  { document: string | DocumentNode; variables?: any },\n  unknown,\n  E,\n  Partial<Pick<ClientError, 'request' | 'response'>>\n> => {\n  const client =\n    'client' in options ? options.client : new GraphQLClient(options.url)\n  const requestHeaders: RequestHeaders =\n    'requestHeaders' in options ? options.requestHeaders : {}\n\n  return async (\n    { document, variables },\n    { getState, endpoint, forced, type, signal, extra }\n  ) => {\n    try {\n      const prepareHeaders: PrepareHeaders =\n        options.prepareHeaders ?? ((x) => x)\n      const headers = new Headers(stripUndefined(requestHeaders))\n\n      const preparedHeaders = await prepareHeaders(headers, {\n        getState,\n        endpoint,\n        forced,\n        type,\n        extra,\n      })\n\n      return {\n        data: await client.request({\n          document,\n          variables,\n          signal: signal as unknown as RequestOptions['signal'],\n          requestHeaders: preparedHeaders,\n        }),\n        meta: {},\n      }\n    } catch (error) {\n      if (error instanceof ClientError) {\n        const { name, message, stack, request, response } = error\n\n        const customErrors =\n          options.customErrors ?? (() => ({ name, message, stack }))\n\n        const customizedErrors = customErrors(error) as E\n\n        return { error: customizedErrors, meta: { request, response } }\n      }\n      throw error\n    }\n  }\n}\n\nfunction stripUndefined(obj: any) {\n  if (!isPlainObject(obj)) {\n    return obj\n  }\n  const copy: Record<string, any> = { ...obj }\n  for (const [k, v] of Object.entries(copy)) {\n    if (typeof v === 'undefined') delete copy[k]\n  }\n  return copy\n}\n"],"names":["options","client","GraphQLClient","url","requestHeaders","document","variables","getState","_ref2","endpoint","forced","type","signal","extra","Promise","resolve","prepareHeaders","_options$prepareHeade","x","obj","isPlainObject","copy","Object","entries","_i","_Object$entries","length","k","_Object$entries$_i","stripUndefined","headers","then","preparedHeaders","request","_client$request","data","meta","_catch","error","ClientError","_options$customErrors","name","message","stack","response","customErrors","e","reject"],"mappings":"0mBAWuC,SACrCA,GAOA,IAAYC,EACV,WAAAD,EAAsBA,EAAQC,OAAS,IAAIC,EAAAA,cAAcF,EAAQG,KAC/CC,EAClB,mBAAAJ,EAA8BA,EAAQI,eAAiB,GAEzD,OACIC,SAAAA,EAAAA,GAAAA,IAAAA,IAAAA,SAAUC,EAAAA,EAAAA,UADdC,EAAAC,EAEID,SAAUE,IAAAA,SAAUC,EAAAA,EAAAA,OAAQC,EAFhCH,EAEgCG,KAAMC,IAAAA,OAAQC,EAAAA,EAAAA,UAExC,OAAAC,QAAAC,iCACkBC,EACS,OADTC,EAClBjB,EAAQgB,gBAAmBC,EAAA,SAACC,GAAMA,OAAAA,KACpB,YAmCtB,SAAwBC,GACtB,IAAKC,EAAaA,cAACD,GACjB,OAAOA,EAGT,IADA,IAAME,OAAiCF,GAClBG,EAAAA,EAAAA,EAAAA,OAAOC,QAAQF,GAApCG,EAAAC,EAAAC,OAAAF,IAA2C,CAAtC,IAAOG,EAAAA,EAAAA,QACO,IADdC,EAAA,WACsCP,QAE3C,OACDA,EA5CiCQ,CAAezB,IAHzCU,QAAAC,QAK4BC,EAAec,EAAS,CACpDvB,SAAAA,EACAE,SAAAA,EACAC,OAAAA,EACAC,KAAAA,EACAE,MAAAA,KAVAkB,KAAA,SAKIC,GALJ,OAAAlB,QAAAC,QAcYd,EAAOgC,QAAQ,CACzB5B,SAAAA,EACAC,UAAAA,EACAM,OAAQA,EACRR,eAAgB4B,KAlBlBD,KAAA,SAAAG,GAaF,MAAO,CACLC,OAMAC,KAAM,8BApBN,IAAAnB,EACkBD,wCADlBqB,CAAA,EADF,SAuBOC,GACP,GAAIA,eAAJC,YAAkC,CAAA,IAAAC,EACxBC,EAA4CH,EAA5CG,KAAMC,EAAsCJ,EAAtCI,QAASC,EAA6BL,EAA7BK,MAAOV,EAAsBK,EAAtBL,QAASW,EAAaN,EAAbM,SAOvC,MAAO,CAAEN,OALS,OAChBtC,EAAAA,EAAQ6C,cADQL,EACS,iBAAO,CAAEC,KAAAA,EAAMC,QAAAA,EAASC,MAAAA,KAEbL,GAEJF,KAAM,CAAEH,QAAAA,EAASW,SAAAA,IAErD,WArCJ,MAwCDE,GAAA,OAAAhC,QAAAiC,OAAAD"}